#!/usr/bin/env python
import os
import re
import subprocess
import stat
import sys
from datetime import datetime

LOG_FILE = "gitsecure.log"

SENSITIVE_PATTERNS = [
    r"apiKey\s*=\s*\"[A-Za-z0-9\-]{16,}\"",  # Example pattern for API keys
    r"secret\s*=\s*\"[A-Za-z0-9\-]{16,}\"",  # Example pattern for secrets
    r"password\s*=\s*\"[A-Za-z0-9\*\!\@\#\$\%\^\&\(\)]{6,}\"",  # Example for passwords
    r"token\s*=\s*\"[A-Za-z0-9\-]{16,}\"",  # Example for tokens
]

def log(msg):
    with open(LOG_FILE, "a") as f:
        f.write(f"{datetime.now()} {msg}\n")

def scan_sensitive(file_path):
    try:
        with open(file_path, "r", errors="ignore") as f:
            content = f.read()
            for pattern in SENSITIVE_PATTERNS:
                if re.search(pattern, content, re.IGNORECASE):
                    return f"Sensitive info found in {file_path}: {pattern}"
    except Exception as e:
        log(f"Error scanning {file_path}: {e}")
        return None
    return None

def check_permissions(file_path):
    st = os.stat(file_path)
    if st.st_mode & stat.S_IWOTH:
        return f"File {file_path} is world-writable!"
    return None

def run_bandit():
    try:
        result = subprocess.run(
            ["bandit", "-r", "."], capture_output=True, text=True
        )
        if "Severity: High" in result.stdout:
            log("Bandit: High severity issues found.")
            return "Bandit: High severity issues found."
    except FileNotFoundError:
        return "Bandit not installed. Run: pip install bandit"
    return "No high severity issues found."

def main():
    findings = []
    files = subprocess.check_output(
        ["git", "diff", "--cached", "--name-only"]
    ).decode().splitlines()

    for file in files:
        if not os.path.isfile(file):
            continue
        result = scan_sensitive(file)
        if result:
            findings.append(result)

        perms = check_permissions(file)
        if perms:
            findings.append(perms)

    bandit_result = run_bandit()
    if bandit_result:
        findings.append(bandit_result)

    if findings:
        print("\nCOMMIT BLOCKED BY GitSecure:")
        for f in findings:
            print(f" - {f}")
            log(f)
        sys.exit(1)
    else:
        print("GitSecure: All checks passed.")

if __name__ == "__main__":
    main()
